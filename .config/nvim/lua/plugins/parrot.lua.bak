local api_key = os.getenv("KODIFY_API_KEY")

require("parrot").setup({
	-- Providers must be explicitly set up to make them available.
	providers = {
		openai = {
			name = "openai",
			api_key = api_key,
			endpoint = "https://demo1-fundres.dev.mts.ai/v1/chat/completions",
			-- model = { "kodify_2.0.1", "cotype_pro_2", "cotype_pro_16k_1.1" },
			model = { "kodify_2.0.1" },
			-- Custom headers function
			headers = function()
				return {
					["Content-Type"] = "application/json",
					["Authorization"] = "Bearer " .. api_key,
				}
			end,
			-- -- Custom payload preprocessing
			-- preprocess_payload = function(payload)
			-- 	-- Modify payload for your API format
			-- 	return payload
			-- end,
			-- -- Custom response processing
			-- process_stdout = function(response)
			-- 	-- Parse streaming response from your API
			-- 	local success, decoded = pcall(vim.json.decode, response)
			-- 	if success and decoded.content then
			-- 		return decoded.content
			-- 	end
			-- end,
		},
	},
	prompts = {
		["Spell"] = "I want you to proofread the provided text and fix the errors.", -- e.g., :'<,'>PrtRewrite Spell
		["Comment"] = "Provide a comment that explains what the snippet is doing.", -- e.g., :'<,'>PrtPrepend Comment
		["Complete"] = "Continue the implementation of the provided snippet in the file {{filename}}.", -- e.g., :'<,'>PrtAppend Complete
	},
	hooks = {
		Ask = function(parrot, params)
			local template = [[
          In light of your existing knowledge base, please generate a response that
          is succinct and directly addresses the question posed. Prioritize accuracy
          and relevance in your answer, drawing upon the most recent information
          available to you. Aim to deliver your response in a concise manner,
          focusing on the essence of the inquiry.
          Question: {{command}}
        ]]
			local model_obj = parrot.get_model("command")
			parrot.logger.info("Asking model: " .. model_obj.name)
			parrot.Prompt(params, parrot.ui.Target.popup, model_obj, "ðŸ¤– Ask ~ ", template)
		end,
		SpellCheck = function(prt, params)
			local chat_prompt = [[
          Your task is to take the text provided and rewrite it into a clear,
          grammatically correct version while preserving the original meaning
          as closely as possible. Correct any spelling mistakes, punctuation
          errors, verb tense issues, word choice problems, and other
          grammatical mistakes.
        ]]
			prt.ChatNew(params, chat_prompt)
		end,
		CompleteFullContext = function(prt, params)
			local template = [[
        I have the following code from {{filename}}:

        ```{{filetype}}
        {{filecontent}}
        ```

        Please look at the following section specifically:
        ```{{filetype}}
        {{selection}}
        ```

        Please finish the code above carefully and logically.
        Respond just with the snippet of code that should be inserted.
        ]]
			local model_obj = prt.get_model("command")
			prt.Prompt(params, prt.ui.Target.append, model_obj, nil, template)
		end,
		CodeConsultant = function(prt, params)
			local chat_prompt = [[
          Your task is to analyze the provided {{filetype}} code and suggest
          improvements to optimize its performance. Identify areas where the
          code can be made more efficient, faster, or less resource-intensive.
          Provide specific suggestions for optimization, along with explanations
          of how these changes can enhance the code's performance. The optimized
          code should maintain the same functionality as the original code while
          demonstrating improved efficiency.

          Here is the code
          ```{{filetype}}
          {{filecontent}}
          ```
        ]]
			prt.ChatNew(params, chat_prompt)
		end,
	},
})
